name: Go Build Binary

on:
  push:
    branches:
      - "main"
      - "development"
  pull_request:
    branches:
      - "main"

jobs:
  unit-test:
      name: "Unit Testing"
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Setup Go
          uses: actions/setup-go@v2
          with:
            go-version: 1.17
        - name: Running Unit-Test-Main-Svc
          working-directory: ./main-svc
          run: go test ./... -cover
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Build and push Docker images
      uses: docker/build-push-action@v1.1.0
      with:
        # Username used to log in to a Docker registry. If not set then no login will occur
        username: _json_key
        # Password or personal access token used to log in to a Docker registry. If not set then no login will occur
        password: ${{ secrets.GCP_CREDENTIALS }}
        # Server address of Docker registry. If not set then will default to Docker Hub
        registry: gcr.io
        # Docker repository to tag the image with
        repository: ${{ secrets.GCP_PROJECT_ID }}/main-svc
        # Comma-delimited list of tags. These will be added to the registry/repository to form the image's tags
        tags: latest
        # Automatically tags the built image with the git reference as per the readme
        tag_with_ref: true
        # Automatically tags the built image with the git short SHA as per the readme
        tag_with_sha: true
        # Comma-delimited list of labels to add to the built image
        labels: github-action-build
        # Whether to push the image
        push: true
          
    
      
#   build-and-push-to-gcr:
#     runs-on: ubuntu-latest
#     steps:
#       - uses: actions/checkout@v2
#       - name: Get the tag name
#         id: get_tag_name
#         run: echo ::set-output name=GIT_TAG_NAME::${GITHUB_REF/refs\/tags\//}
#       - uses: google-github-actions/setup-gcloud@master
#       - uses: RafikFarhad/push-to-gcr-github-action@v4
#         with:
#           gcloud_service_key: ${{ secrets.JSON_GCP_BASE64 }}
#           registry: gcr.io
#           project_id: ${{ secrets.GCP_PROJECT_ID }}
#           image_name: main-svc
#           image_tag: latest,${{ steps.get_tag_name.outputs.GIT_TAG_NAME }}
#           context: main-svc
#           dockerfile: ./main-svc/Dockerfile
          


#   build-push-docker:
#     name: Build docker image then push to docker hub
#     runs-on: ubuntu-latest
#     needs: "unit-test"
#     steps:
#       - uses: actions/checkout@v2
#       - name: Build Docker Image
#         run: docker build -t zeinfahrozi/main-svc:latest ./main-svc
#       - name: Login to Docker Hub
#         uses: docker/login-action@v1
#         with:
#           username: ${{ secrets.DOCKERHUB_USERNAME }}
#           password: ${{ secrets.DOCKERHUB_TOKEN }}
#       - name: Push image to Docker Hub
#         run: docker push zeinfahrozi/main-svc:latest
   
#   deploy:
#         name: Setup Gcloud Account
#         needs: "unit-test"
#         runs-on: ubuntu-latest
#         env:
#           IMAGE_NAME: gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}
#         steps:

#         - name: Login
#           uses: google-github-actions/setup-gcloud@master
#           with:
#             project_id: ${{ secrets.GCP_PROJECT_ID }}
#             service_account_email: ${{ secrets.GCP_EMAIL }}
#             service_account_key: ${{ secrets.GCP_CREDENTIALS }}

#         - name: Configure Docker
#           run: gcloud auth configure-docker --quiet

#         - name: Checkout repository
#           uses: actions/checkout@v2

#         - name: Build Docker image
#           run: |
#             docker build -t $IMAGE_NAME 

#         - name: Test Docker image
#           run: docker run $IMAGE_NAME sh -c "go test -v"

#         - name: Push Docker image
#           run: docker push $IMAGE_NAME

#         - name: Deploy Docker image
#           run: gcloud run deploy ${{ secrets.GCP_PROJECT_ID }} --image registry.hub.docker.com/${{ secrets.DOCKERHUB_USERNAME }}/main-svc:latest --region us-central1 --platform managed
